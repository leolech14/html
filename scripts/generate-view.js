#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const Mustache = require('mustache');

// View generator
function generateView(type, name, data = {}) {
    const date = new Date().toISOString().split('T')[0].replace(/-/g, '');
    const version = 'v01';
    const fileName = `${date}_${type}_${name}_${version}.html`;
    
    // Select appropriate layout
    const layoutMap = {
        'data': 'data-viz.html',
        'report': 'base.html',
        'dashboard': 'data-viz.html',
        'sandbox': 'base.html'
    };
    
    const layoutFile = layoutMap[type] || 'base.html';
    const layoutPath = path.join(__dirname, '..', 'src', 'layouts', layoutFile);
    const layoutTemplate = fs.readFileSync(layoutPath, 'utf8');
    
    // Default data
    const viewData = {
        title: data.title || `${name.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}`,
        description: data.description || `${type} view generated by AI-Human Interface System`,
        timestamp: new Date().toISOString(),
        formattedDate: new Date().toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        }),
        version: version,
        projectName: 'AI-Human Interface',
        currentTheme: 'main',
        systemVersion: '1.0.0',
        componentRegistry: '{}',
        ...data
    };
    
    // Render the view
    const html = Mustache.render(layoutTemplate, viewData);
    
    // Save to appropriate directory
    const outputDir = path.join(__dirname, '..', 'views', type);
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const outputPath = path.join(outputDir, fileName);
    fs.writeFileSync(outputPath, html);
    
    // Log the view in the view registry
    logView(type, name, fileName, data.components || []);
    
    console.log(`✅ View generated: ${fileName}`);
    console.log(`   📁 Location: views/${type}/${fileName}`);
    
    return outputPath;
}

// View registry logger
function logView(type, name, fileName, components) {
    const registryPath = path.join(__dirname, '..', 'views', 'registry.json');
    
    let registry = {
        views: {},
        stats: {
            total: 0,
            byType: {}
        }
    };
    
    if (fs.existsSync(registryPath)) {
        registry = JSON.parse(fs.readFileSync(registryPath, 'utf8'));
    }
    
    registry.views[fileName] = {
        type: type,
        name: name,
        created: new Date().toISOString(),
        components: components,
        path: `views/${type}/${fileName}`
    };
    
    registry.stats.total++;
    registry.stats.byType[type] = (registry.stats.byType[type] || 0) + 1;
    
    fs.writeFileSync(registryPath, JSON.stringify(registry, null, 2));
}

// Example view generators
const viewGenerators = {
    // Generate a chart view
    chart: (name, config) => {
        return generateView('data', name, {
            title: config.title,
            description: config.description,
            vizTitle: config.title,
            dataDate: new Date().toLocaleDateString(),
            dataSource: config.source || 'System Generated',
            visualizations: `
                <div class="viz-item">
                    <div class="component-header">
                        <h3 class="component-title">${config.chartTitle || 'Chart'}</h3>
                    </div>
                    <div class="chart-container">
                        <canvas id="chart-${name}"></canvas>
                    </div>
                </div>
            `,
            vizScripts: `
                const ctx = document.getElementById('chart-${name}').getContext('2d');
                const chartConfig = ${JSON.stringify(config.chartConfig || {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
                        datasets: [{
                            label: 'Sample Data',
                            data: [10, 20, 30, 25, 35],
                            borderColor: '#6366f1',
                            backgroundColor: 'rgba(99, 102, 241, 0.1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                }, null, 2)};
                new Chart(ctx, chartConfig);
            `,
            components: ['chart-line']
        });
    },
    
    // Generate a report view
    report: (name, config) => {
        return generateView('report', name, {
            title: config.title,
            pageTitle: config.title,
            pageDescription: config.description,
            mainContent: config.content || '<p>Report content goes here.</p>',
            components: []
        });
    }
};

// CLI handling
const args = process.argv.slice(2);
if (args.length < 2) {
    console.log('Usage: npm run generate:view <type> <name> [options]');
    console.log('Types: data, report, dashboard, sandbox');
    console.log('Example: npm run generate:view data financial-analysis');
    process.exit(1);
}

const [type, name, ...options] = args;

// Parse options if provided
let config = {};
if (options.length > 0) {
    try {
        config = JSON.parse(options.join(' '));
    } catch (e) {
        config = { title: options.join(' ') };
    }
}

// Use specific generator if available
if (viewGenerators[type]) {
    viewGenerators[type](name, config);
} else {
    generateView(type, name, config);
}